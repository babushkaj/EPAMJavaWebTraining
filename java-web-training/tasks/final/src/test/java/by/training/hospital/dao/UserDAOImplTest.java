package by.training.hospital.dao;

import by.training.hospital.dto.UserDTO;
import by.training.hospital.entity.Role;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

//@Ignore
@RunWith(JUnit4.class)
public class UserDAOImplTest {

    private static final String DB_PROPERTY = "database";
    private static ConnectionManager connectionManager;
    private static ConnectionPool connectionPool;

    @BeforeClass
    public static void initPool() throws ConnectionPoolException {
        connectionPool = ConnectionPoolImpl.getInstance();
        connectionPool.init(DB_PROPERTY, 5);
        TransactionManager transactionManager = new TransactionManagerImpl(connectionPool);
        connectionManager = new ConnectionManagerImpl(transactionManager);
    }

    @Before
    public void createTable() throws SQLException {
        String createRoleTable = "CREATE TABLE user_role" +
                " (id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  role_name VARCHAR(10) NOT NULL," +
                " PRIMARY KEY (id))";

        executeSql(createRoleTable);

        String createUserAccountTable = "CREATE TABLE user_account (" +
                "  id         BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  login      VARCHAR(25) UNIQUE  NOT NULL," +
                "  password   VARCHAR(35)         NOT NULL," +
                "  is_blocked BOOLEAN DEFAULT false NOT NULL," +
                "  role_id    BIGINT DEFAULT 2 NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (role_id) REFERENCES user_role (id));";

        executeSql(createUserAccountTable);

        String createUserInfoTable = "CREATE TABLE user_info (" +
                "  id         BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  first_name VARCHAR(25)        NOT NULL," +
                "  last_name  VARCHAR(25)        NOT NULL," +
                "  email      VARCHAR(25) UNIQUE NOT NULL," +
                "  phone      VARCHAR(15)," +
                "  user_id    BIGINT             NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (user_id) REFERENCES user_account (id) ON DELETE CASCADE)";

        executeSql(createUserInfoTable);

        String insertRoles = "INSERT INTO user_role (role_name)" +
                "VALUES ('ADMIN')," +
                "       ('VISITOR')," +
                "       ('DOCTOR')";

        executeSql(insertRoles);

        String insertUserAccounts = "INSERT INTO user_account (login, password, role_id)" +
                "VALUES ('Jay', 'd8578edf8458ce06fbc5bb76a58c5ca4', 2)," +
                "       ('Aloizy', '4e5fd8ab9c0e3e84ab141a65e36ef094', 2)," +
                "       ('Ostap', 'bec92fe29583ad9a32a1f1b4d1df5b01', 3)";

        executeSql(insertUserAccounts);

        String insertUserInfos = "INSERT INTO user_info (first_name, last_name, email, phone, user_id) " +
                " VALUES ('Посетитель1', 'Посетитель1', 'visitor1@gmail.com', '+375291111111', 1), " +
                "        ('Посетитель2', 'Посетитель2', 'visitor2@gmail.com', '+375292222222', 2), " +
                "        ('Врач1', 'Врач1', 'doctor1@gmail.com', '+375293333333', 3)";

        executeSql(insertUserInfos);

    }

    @After
    public void deleteTables() throws SQLException {
        String dropUserInfos = "DROP TABLE user_info";
        String dropUsers = "DROP TABLE user_account";
        String dropRoles = "DROP TABLE user_role";
        executeSql(dropUserInfos);
        executeSql(dropUsers);
        executeSql(dropRoles);
    }

    @AfterClass
    public static void destroyPool() throws ConnectionPoolException {
        connectionPool.destroy();
    }

    private void executeSql(String sql) throws SQLException {
        Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:hospital", "sa", "");
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.executeUpdate();
        statement.close();
        connection.close();
    }

    @Test
    public void shouldReturnUser() throws NoConcreteEntityInDatabaseException, DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        UserDTO userDTO = userDAO.getById(1L);

        Assert.assertEquals(userDTO.getLogin(), "Jay");
    }

    @Test
    public void shouldAddUser() throws DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        UserDTO userDTO = new UserDTO();
        userDTO.setLogin("NewUser");
        userDTO.setPassword("d8578edf8458ce06fbc5bb76a58c5ca4");
        userDTO.setRole(Role.VISITOR);

        long newUserInfoId = userDAO.create(userDTO);

        Assert.assertEquals(newUserInfoId, 4);
    }

    @Test
    public void shouldUpdateUser() throws NoConcreteEntityInDatabaseException, DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        UserDTO userDTO = userDAO.getById(1L);
        userDTO.setLogin("UpdatedLogin");
        boolean result = userDAO.update(userDTO);
        UserDTO userUpdatedDTO = userDAO.getById(1L);

        Assert.assertTrue(result);
        Assert.assertEquals(userUpdatedDTO.getLogin(), "UpdatedLogin");
    }

    @Test
    public void shouldDeleteUser() throws DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        boolean result = userDAO.delete(1L);
        List<UserDTO> users = userDAO.getAll();

        Assert.assertTrue(result);
        Assert.assertEquals(users.size(), 2);
    }

    @Test
    public void shouldReturnAllUsers() throws DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        List<UserDTO> users = userDAO.getAll();

        Assert.assertEquals(users.size(), 3);
    }

    @Test
    public void shouldReturnUserByLogin() throws DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        UserDTO userDTO = userDAO.getUserByLogin("Jay");

        Assert.assertEquals(userDTO.getId(), new Long(1));
    }

    @Test
    public void shouldReturnTrue() throws DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        boolean result = userDAO.isLoginUnique("Unique");

        Assert.assertTrue(result);
    }

    @Test
    public void shouldReturnFalse() throws DAOException {
        UserDAO userDAO = new UserDAOImpl(connectionManager);
        boolean result = userDAO.isLoginUnique("Jay");

        Assert.assertFalse(result);
    }

}
