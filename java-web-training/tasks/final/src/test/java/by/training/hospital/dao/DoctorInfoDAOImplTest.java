package by.training.hospital.dao;

import by.training.hospital.dto.DoctorInfoDTO;
import by.training.hospital.entity.Specialization;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

//@Ignore
@RunWith(JUnit4.class)
public class DoctorInfoDAOImplTest {

    private static final String DB_PROPERTY = "database";
    private static ConnectionManager connectionManager;
    private static ConnectionPool connectionPool;

    @BeforeClass
    public static void initPool() throws ConnectionPoolException {
        connectionPool = ConnectionPoolImpl.getInstance();
        connectionPool.init(DB_PROPERTY, 5);
        TransactionManager transactionManager = new TransactionManagerImpl(connectionPool);
        connectionManager = new ConnectionManagerImpl(transactionManager);
    }

    @AfterClass
    public static void destroyPool() throws ConnectionPoolException {
        connectionPool.destroy();
    }

    @Before
    public void createTable() throws SQLException {
        String createRoleTable = "CREATE TABLE user_role" +
                " (id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  role_name VARCHAR(10) NOT NULL," +
                " PRIMARY KEY (id))";

        executeSql(createRoleTable);

        String createSpecTable = "CREATE TABLE specialization (" +
                "  id        BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  spec_name VARCHAR(20) NOT NULL," +
                "  PRIMARY KEY (id))";

        executeSql(createSpecTable);

        String createDaysTable = "CREATE TABLE days_of_week (" +
                "  id       BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  day_name VARCHAR(9) NOT NULL," +
                "  PRIMARY KEY (id))";

        executeSql(createDaysTable);

        String createUserAccountTable = "CREATE TABLE user_account (" +
                "  id         BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  login      VARCHAR(25) UNIQUE  NOT NULL," +
                "  password   VARCHAR(35)         NOT NULL," +
                "  is_blocked BOOLEAN DEFAULT false NOT NULL," +
                "  role_id    BIGINT DEFAULT 2 NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (role_id) REFERENCES user_role (id))";

        executeSql(createUserAccountTable);

        String createDoctorInfoTable = "CREATE TABLE doctor_info (" +
                "  id          BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  description VARCHAR(700) NOT NULL," +
                "  user_id     BIGINT        NOT NULL," +
                "  spec_id     BIGINT        NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (user_id) REFERENCES user_account (id)," +
                "  FOREIGN KEY (spec_id) REFERENCES specialization (id))";

        executeSql(createDoctorInfoTable);

        String createDocWorkingDaysTable = "CREATE TABLE doc_working_days (" +
                "  id        BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  doctor_id BIGINT NOT NULL," +
                "  day_id    BIGINT NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (doctor_id) REFERENCES doctor_info (id) ON DELETE CASCADE," +
                "  FOREIGN KEY (day_id) REFERENCES days_of_week (id)  ON DELETE CASCADE)";

        executeSql(createDocWorkingDaysTable);

        String insertRoles = "INSERT INTO user_role (role_name)" +
                " VALUES ('ADMIN')," +
                "       ('VISITOR')," +
                "       ('DOCTOR')";

        executeSql(insertRoles);

        String insertSpecs = "INSERT INTO specialization (spec_name)" +
                " VALUES ('THERAPIST')," +
                "       ('OCULIST')," +
                "       ('OTOLARYNGOLOGIST')," +
                "       ('SURGEON')," +
                "       ('TRAUMATOLOGIST')";

        executeSql(insertSpecs);

        String insertDays = "INSERT INTO days_of_week (day_name)" +
                " VALUES ('MONDAY')," +
                "       ('TUESDAY')," +
                "       ('WEDNESDAY')," +
                "       ('THURSDAY')," +
                "       ('FRIDAY')," +
                "       ('SATURDAY')," +
                "       ('SUNDAY')";

        executeSql(insertDays);

        String insertUserAccounts = "INSERT INTO user_account (login, password, role_id)" +
                " VALUES ('Doctor1', 'd8578edf8458ce06fbc5bb76a58c5ca4', 3)," +
                "       ('Doctor2', '4e5fd8ab9c0e3e84ab141a65e36ef094', 3)," +
                "       ('Doctor3', 'bec92fe29583ad9a32a1f1b4d1df5b01', 3)";

        executeSql(insertUserAccounts);

        String insertDoctorInfos = "INSERT INTO doctor_info (description, user_id, spec_id) " +
                " VALUES ('Doctor1 info.', 1, 1), " +
                "       ('Doctor2 info.', 2, 2), " +
                "       ('Doctor3 info.', 3, 3)";

        executeSql(insertDoctorInfos);

        String insertDocWorkingDays = "INSERT INTO doc_working_days (doctor_id, day_id)" +
                " VALUES (1,1), (1,2), (1,3), (1,4), (1,5)," +
                "       (2,3), (2,4), (2,5), (2,6), (2,7)," +
                "       (3,1), (3,3), (3,4), (3,5), (3,7)";

        executeSql(insertDocWorkingDays);

    }

    @After
    public void deleteTables() throws SQLException {
        String dropDocWorkingDays = "DROP TABLE doc_working_days";
        String dropDoctorInfos = "DROP TABLE doctor_info";
        String dropUsers = "DROP TABLE user_account";
        String dropRoles = "DROP TABLE user_role";
        String dropSpecs = "DROP TABLE specialization";
        String dropDays = "DROP TABLE days_of_week";
        executeSql(dropDocWorkingDays);
        executeSql(dropDoctorInfos);
        executeSql(dropUsers);
        executeSql(dropRoles);
        executeSql(dropSpecs);
        executeSql(dropDays);
    }

    private void executeSql(String sql) throws SQLException {
        Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:hospital", "sa", "");
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.executeUpdate();
        statement.close();
        connection.close();
    }

    @Test
    public void shouldReturnDoctorInfo() throws NoConcreteEntityInDatabaseException, DAOException {
        DoctorInfoDAO doctorInfoDAO = new DoctorInfoDAOImpl(connectionManager);
        DoctorInfoDTO doctorInfoDTO = doctorInfoDAO.getById(1L);

        Assert.assertEquals(doctorInfoDTO.getSpec(), Specialization.valueOf("THERAPIST"));
    }

    @Test
    public void shouldAddDoctorInfo() throws DAOException {
        DoctorInfoDAO doctorInfoDAO = new DoctorInfoDAOImpl(connectionManager);
        DoctorInfoDTO doctorInfoDTO = new DoctorInfoDTO();
        doctorInfoDTO.setSpec(Specialization.OCULIST);
        doctorInfoDTO.setDescription("NewDocDescription.");
        doctorInfoDTO.setUserId(3L);
        long newDoctorInfoId = doctorInfoDAO.create(doctorInfoDTO);

        Assert.assertEquals(newDoctorInfoId, 4);
    }

    @Test
    public void shouldUpdateDoctorInfo() throws NoConcreteEntityInDatabaseException, DAOException {
        DoctorInfoDAO doctorInfoDAO = new DoctorInfoDAOImpl(connectionManager);
        DoctorInfoDTO doctorInfoDTO = doctorInfoDAO.getById(1L);
        doctorInfoDTO.setDescription("This is a new description");
        boolean result = doctorInfoDAO.update(doctorInfoDTO);
        DoctorInfoDTO doctorInfoUpdatedDTO = doctorInfoDAO.getById(1L);

        Assert.assertTrue(result);
        Assert.assertEquals(doctorInfoUpdatedDTO.getDescription(), "This is a new description");
    }

    @Test
    public void shouldDeleteAddress() throws DAOException {
        DoctorInfoDAO doctorInfoDAO = new DoctorInfoDAOImpl(connectionManager);
        boolean result = doctorInfoDAO.delete(1L);
        List<DoctorInfoDTO> doctorInfos = doctorInfoDAO.getAll();

        Assert.assertTrue(result);
        Assert.assertEquals(doctorInfos.size(), 2);
    }

    @Test
    public void shouldReturnAllAddresses() throws DAOException {
        DoctorInfoDAO doctorInfoDAO = new DoctorInfoDAOImpl(connectionManager);
        List<DoctorInfoDTO> doctorInfos = doctorInfoDAO.getAll();

        Assert.assertEquals(doctorInfos.size(), 3);
    }

    @Test
    public void shouldReturnDoctorInfoByUserId() throws DAOException {
        DoctorInfoDAO doctorInfoDAO = new DoctorInfoDAOImpl(connectionManager);
        DoctorInfoDTO doctorInfoDTO = doctorInfoDAO.getDoctorInfoByUserId(1L);

        Assert.assertEquals(doctorInfoDTO.getDescription(), "Doctor1 info.");
    }
}
