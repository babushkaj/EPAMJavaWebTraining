package by.training.hospital.dao;

import by.training.hospital.dto.VisitDTO;
import by.training.hospital.entity.VisitStatus;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

//@Ignore
@RunWith(JUnit4.class)
public class VisitDAOImplTest {

    private static final String DB_PROPERTY = "database";
    private static ConnectionManager connectionManager;
    private static ConnectionPool connectionPool;

    @BeforeClass
    public static void initPool() throws ConnectionPoolException {
        connectionPool = ConnectionPoolImpl.getInstance();
        connectionPool.init(DB_PROPERTY, 5);
        TransactionManager transactionManager = new TransactionManagerImpl(connectionPool);
        connectionManager = new ConnectionManagerImpl(transactionManager);
    }

    @AfterClass
    public static void destroyPool() throws ConnectionPoolException {
        connectionPool.destroy();
    }

    @Before
    public void createTable() throws SQLException {
        String createRoleTable = "CREATE TABLE user_role" +
                " (id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  role_name VARCHAR(10) NOT NULL," +
                " PRIMARY KEY (id))";

        executeSql(createRoleTable);

        String createVisitStatusTable = "CREATE TABLE visit_status (" +
                "  id          BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  status_name VARCHAR(10) NOT NULL," +
                "  PRIMARY KEY (id))";

        executeSql(createVisitStatusTable);

        String createUserAccountTable = "CREATE TABLE user_account (" +
                "  id         BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  login      VARCHAR(25) UNIQUE  NOT NULL," +
                "  password   VARCHAR(35)         NOT NULL," +
                "  is_blocked BOOLEAN DEFAULT false NOT NULL," +
                "  role_id    BIGINT DEFAULT 2 NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (role_id) REFERENCES user_role (id))";

        executeSql(createUserAccountTable);

        String createUserInfoTable = "CREATE TABLE user_info (" +
                "  id         BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  first_name VARCHAR(25)        NOT NULL," +
                "  last_name  VARCHAR(25)        NOT NULL," +
                "  email      VARCHAR(25) UNIQUE NOT NULL," +
                "  phone      VARCHAR(15)," +
                "  user_id    BIGINT             NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (user_id) REFERENCES user_account (id))";

        executeSql(createUserInfoTable);

        String createVisitTable = "CREATE TABLE visit (" +
                "  id           BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)," +
                "  cause        VARCHAR(300) NOT NULL," +
                "  result       VARCHAR(600)," +
                "  visit_date   BIGINT    NOT NULL," +
                "  visitor_id   BIGINT       NOT NULL," +
                "  doctor_id    BIGINT       NOT NULL," +
                "  status_id    BIGINT       NOT NULL," +
                "  PRIMARY KEY (id)," +
                "  FOREIGN KEY (visitor_id) REFERENCES user_account (id)," +
                "  FOREIGN KEY (doctor_id) REFERENCES user_account (id)," +
                "  FOREIGN KEY (status_id) REFERENCES visit_status (id))";

        executeSql(createVisitTable);

        String insertRoles = "INSERT INTO user_role (role_name)" +
                " VALUES ('ADMIN')," +
                "       ('VISITOR')," +
                "       ('DOCTOR')";

        executeSql(insertRoles);

        String insertVisitStatuses = "INSERT INTO visit_status (status_name) " +
                " VALUES ('PLANNED')," +
                "       ('CANCELED')," +
                "       ('COMPLETED')";

        executeSql(insertVisitStatuses);

        String insertUserAccounts = "INSERT INTO user_account (login, password, role_id)" +
                " VALUES ('Doctor1', 'd8578edf8458ce06fbc5bb76a58c5ca4', 3)," +
                "       ('Doctor2', '4e5fd8ab9c0e3e84ab141a65e36ef094', 3)," +
                "       ('Doctor3', 'bec92fe29583ad9a32a1f1b4d1df5b01', 3)";

        executeSql(insertUserAccounts);

        String insertVisits = "INSERT INTO visit (cause, result, visit_date, visitor_id, doctor_id, status_id) " +
                " VALUES ('Головная боль.', null, 1573812000000, 1, 3, 1)," +
                "       ('Плановая проверка зрения.', null, 1575270000000, 2, 3, 1)," +
                "       ('Болит правое ухо.', null, 1575268200000, 1, 3, 1)";

        executeSql(insertVisits);

        String insertUserInfos = "INSERT INTO user_info (first_name, last_name, email, phone, user_id) " +
                " VALUES ('Посетитель1', 'Посетитель1', 'visitor1@gmail.com', '+375291111111', 1), " +
                "        ('Посетитель2', 'Посетитель2', 'visitor2@gmail.com', '+375292222222', 2), " +
                "        ('Врач1', 'Врач1', 'doctor1@gmail.com', '+375293333333', 3)";

        executeSql(insertUserInfos);
    }

    @After
    public void deleteTables() throws SQLException {
        String dropUserInfos = "DROP TABLE user_info";
        String dropVisits = "DROP TABLE visit";
        String dropUsers = "DROP TABLE user_account";
        String dropVisitStatuses = "DROP TABLE visit_status";
        String dropRoles = "DROP TABLE user_role";
        executeSql(dropUserInfos);
        executeSql(dropVisits);
        executeSql(dropUsers);
        executeSql(dropVisitStatuses);
        executeSql(dropRoles);
    }

    private void executeSql(String sql) throws SQLException {
        Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:hospital", "sa", "");
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.executeUpdate();
        statement.close();
        connection.close();
    }

    @Test
    public void shouldReturnVisit() throws NoConcreteEntityInDatabaseException, DAOException {
        VisitDAO visitDAO = new VisitDAOImpl(connectionManager);
        VisitDTO visitDTO = visitDAO.getById(1L);

        Assert.assertEquals(visitDTO.getCause(), "Головная боль.");
    }

    @Test
    public void shouldAddVisit() throws DAOException {
        VisitDAO visitDAO = new VisitDAOImpl(connectionManager);
        VisitDTO visitDTO = new VisitDTO();
        visitDTO.setCause("Новый визит.");
        visitDTO.setResult(null);
        visitDTO.setDate(new Date());
        visitDTO.setDoctorId(3);
        visitDTO.setVisitorId(1);
        visitDTO.setVisitStatus(VisitStatus.PLANNED);
        long newDoctorInfoId = visitDAO.create(visitDTO);

        Assert.assertEquals(newDoctorInfoId, 4);
    }

    @Test
    public void shouldUpdateVisit() throws NoConcreteEntityInDatabaseException, DAOException {
        VisitDAO visitDAO = new VisitDAOImpl(connectionManager);
        VisitDTO visitDTO = visitDAO.getById(1L);
        visitDTO.setResult("Результат тестового визита.");
        boolean result = visitDAO.update(visitDTO);
        VisitDTO visitUpdatedDTO = visitDAO.getById(1L);

        Assert.assertTrue(result);
        Assert.assertEquals(visitUpdatedDTO.getResult(), "Результат тестового визита.");
    }

    @Test
    public void shouldDeleteAddress() throws DAOException {
        VisitDAO visitDAO = new VisitDAOImpl(connectionManager);
        boolean result = visitDAO.delete(1L);
        List<VisitDTO> visits = visitDAO.getAll();

        Assert.assertTrue(result);
        Assert.assertEquals(visits.size(), 2);
    }

    @Test
    public void shouldReturnAllAddresses() throws DAOException {
        VisitDAO visitDAO = new VisitDAOImpl(connectionManager);
        List<VisitDTO> visits = visitDAO.getAll();

        Assert.assertEquals(visits.size(), 3);
    }

    @Test
    public void shouldReturnVisitByDoctorId() throws DAOException {
        VisitDAO visitDAO = new VisitDAOImpl(connectionManager);
        List<VisitDTO> visits = visitDAO.getVisitsByDoctorId(3L);

        Assert.assertEquals(visits.size(), 3);
    }

    @Test
    public void shouldReturnVisitByVisitorId() throws DAOException {
        VisitDAO visitDAO = new VisitDAOImpl(connectionManager);
        List<VisitDTO> visits = visitDAO.getVisitsByVisitorId(1L);

        Assert.assertEquals(visits.size(), 2);
    }
}
